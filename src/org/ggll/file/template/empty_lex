import ggll.core.lexical.*;
import ggll.core.syntax.model.*;
import ggll.core.exceptions.*;

%%
%public
%implements ggll.core.lexical.Yylex

%{
	private int comment_count = 0;
	
	private TableNode tableNode[];
	public void TableNodes(TableNode tableNode[])
	{
		this.tableNode = tableNode;
	}
	
	public int searchTableNodeSymbol(String text)
	{		
		for(int i = 1; i < tableNode.length; i++)
		{
			if(tableNode[i] == null) continue;
			if((tableNode[i].getName()).equals(text))
			{
				return i;
			}
		}
		return -1;
	}

	public Yylex()
	{
	}

	public void setReader(java.io.Reader in) {
		zzReader = in;
	}

	/*this method can not be removed, it is used by the error recovery routines. Basically this method call the 
	private method yypushbacck generated by the jflex. */
	public void pushback(int number){
		this.yypushback(number);
	}
%} 

%line
%char
%column
%state COMMENT
%full
%yylexthrow LexicalException


ALPHA=[A-Za-z]
DIGIT=[0-9]
NONNEWLINE_WHITE_SPACE_CHAR=[\ \t\b\012]
NEWLINE=\r|\n|\r\n
WHITE_SPACE_CHAR=[\n\r\ \t\b\012]
STRING_TEXT=(\\\"|[^\n\r\"]|\\{WHITE_SPACE_CHAR}+\\)*
COMMENT_TEXT=([^*/\n]|[^*\n]"/"[^*\n]|[^/\n]"*"[^/\n]|"*"[^/\n]|"/"[^*\n])*
IDENT = {ALPHA}({ALPHA}|{DIGIT}|_)*

%% 

<YYINITIAL>
{
	"," { return new Yytoken(",",yytext(),yyline,yycolumn); }
	":" { return new Yytoken(":",yytext(),yyline,yycolumn); }
	";" { return new Yytoken(";",yytext(),yyline,yycolumn); }
	"(" { return new Yytoken("(",yytext(),yyline,yycolumn); }
	")" { return new Yytoken(")",yytext(),yyline,yycolumn); }
	"[" { return new Yytoken("[",yytext(),yyline,yycolumn); }
	"]" { return new Yytoken("]",yytext(),yyline,yycolumn); }
	"{" { return new Yytoken("{",yytext(),yyline,yycolumn); }
	"}" { return new Yytoken("}",yytext(),yyline,yycolumn); }
	"." { return new Yytoken(".",yytext(),yyline,yycolumn); }
	"+" { return new Yytoken("+",yytext(),yyline,yycolumn); }
	"-" { return new Yytoken("-",yytext(),yyline,yycolumn); }
	"*" { return new Yytoken("*",yytext(),yyline,yycolumn); }
	"/" { return new Yytoken("/",yytext(),yyline,yycolumn); }
	"=" { return new Yytoken("=",yytext(),yyline,yycolumn); }
	"<>" { return new Yytoken("<>",yytext(),yyline,yycolumn); }
	"<"  { return new Yytoken("<",yytext(),yyline,yycolumn); }
	"<=" { return new Yytoken("<=",yytext(),yyline,yycolumn); }
	">"  { return new Yytoken(">",yytext(),yyline,yycolumn); }
	">=" { return new Yytoken(">=",yytext(),yyline,yycolumn); }
	"&"  { return new Yytoken("&",yytext(),yyline,yycolumn); }
	"|"  { return new Yytoken("|",yytext(),yyline,yycolumn); }
	":=" { return new Yytoken(":=",yytext(),yyline,yycolumn); }

	{NONNEWLINE_WHITE_SPACE_CHAR}+ { }

	"/*" { yybegin(COMMENT); comment_count++; }

	\"{STRING_TEXT}\" 
	{
		String str =  yytext().substring(1,yylength()-1);
		return (new Yytoken("String",str,yyline,yycolumn));
	}

	{WHITE_SPACE_CHAR}+ { return (new Yytoken("Esp", yytext(), yyline, yycolumn)); }

	{DIGIT}+ { return (new Yytoken("Numb",yytext(),yyline,yycolumn)); }  

	{IDENT}
	{ 
		int ret = searchTableNodeSymbol(yytext());
		if(ret==-1){
			return (new Yytoken("Iden",yytext(),yyline,yycolumn)); 
		}
		else{	
			return (new Yytoken("Res",yytext(),yyline,yycolumn));
		}
	}
}

<COMMENT> {
	"/*" { comment_count++; }
	"*/" { if (--comment_count == 0) yybegin(YYINITIAL); }
	{COMMENT_TEXT} { }
}

<<EOF>> { return(new Yytoken("EOF","$",yyline,yycolumn-1));}


{NEWLINE} { }

. {
	throw new LexicalException(yytext(), yyline, yycolumn);
}

